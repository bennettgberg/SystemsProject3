scannerCSVsorter

Usage: ./multiThreadSorter_thread -c column_to_sort [-d directory_to_search] [-o output_directory]
	[-d and -o are optional: default directory_to_search is . and default output_directory is also .]

This program recursively searches a directory and its subdirectories, sorting every valid CSV file it finds based on the value in the column named column_to_sort.
Then all sorted files are merged into a single sorted file in the output directory, called AllFiles-sorted-[header_name].csv , where [header_name] is the name of
 header that was sorted on.
Only a header title with a legal movie value type will be sorted on. 

Input: column_to_sort (string), optional path/to/directory/to/search (string) and optional path/to/output/directory (string)
Output: List of TIDs of all threads created in the process of the recursion and sorting, and the total number of threads that were run (excluding the main thread 
	because its existence is obvious).

Data Structures:
    cell: contains the original data and converted data at a certain cell in the table (between commas in a single row of the csv file)
	datarow: contains a row of cells and the number of cells (to store the data from a full row of the csv file)
	table: contains an array of rows (to store the data of the entire csv file).

Process:
    1. Search Directory using directory_scan()
    2. If File, create a new thread, then (only if .csv file) sort_file()
    3. If directory, create a new thread and go to 1
    4. Output all TIDs

Search directory: directory_scan() in multiThreadSorter_thread.c
    Use opendir() and readdir() to read the contents of directory
    Skips . and .. to avoid recursive loops
    When it encounters a file, it calls pthread_create(), and later prints the TID to the console, increments the number of threads, and calls sort_file()
    When it encounters a folder, it calls fork(), adds the PIDS to the shared memory array and calls recursive_scan_and_sort()

Sort file: sort_file() in fixcolumns.c
    Uses the code from Asst0 with some slight changes to use a file buffer instead of an STDIN buffer. The mergesort algorithm is almost identical to the one 
      used in Asst0 and Asst1 (with some minor efficiency improvements).

Testing:
    We created a folder with nested folders 4 levels deep with multiple copies of movie_metadata.csv, and had our multiThreadSorter_thread program sort the files 
	with various starting directories, output directories, and headers to sort on.

More Info:
    We used a new structure pointer called "thread_pointer" to be the input and output of the multi-threaded functions (file_sort() and directory_scan()). This allowed
	us to pass in all the necessary information (file path and index of the header to sort on) to these functions even though only one void pointer variable is 
	allowed to be used as input and output. 
    For fatal errors, the error message was output to both STDOUT and STDERR so that there would be no ambiguity for the user as to why the program crashed 
	(as Professor Francisco suggested in class).
